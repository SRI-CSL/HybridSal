
Installation instructions for HybridSAL Relational Abstractor:
---------------------------------------------------------------

(1) Make sure your system has python 2.6 (or newer)
 
    We also use the scipy package of python. So make sure
    it is installed. On Ubuntu, it can be installed using:

      sudo aptitude install python-numpy  
      sudo aptitude install python-scipy  


    NOTE: This will not work on Ubuntu 8.04 (Hardy Heron)
    or older since these Ubuntu distributions do not have 
    python 2.6. It is possible to install a more recent 
    version of python (e.g., pyhton 2.7.2) from the source 
    on such systems. Then installing numpy and scipy from 
    the source is also possible (but it may not be that easy).

   Make sure that java is installed and running.
   In particular, there should be a rt.jar file.
   NOTE: java-6-openjdk/jre/lib/rt.jar seems to be buggy. 
   But java-6-sun/jre/lib/rt.jar works fine.

   To install java6:
      sudo aptitude install sun-java6-bin
   Make sure java points to /usr/lib/jvm/java-6-sun/jre/bin/java

   NOTE: Make sure javac is pointing to a java compiler;
   or jikes is installed.


(2) Run 

    make install

    If there are errors, make sure Step (1) above was performed.


(3) Run 

    make sal2xml

    This will test if the hybridsal2xml is installed properly
    Nothing works if hybridsal2xml is not installed properly


(4) Run 

    make test

    This will test if the relational abstraction is installed properly.
    Running make test will automatically create abstraction of the
    file examples/Linear1.hsal.  You can run relational abstraction tool
    on other models as follows:
  	bin/hsal2hasal examples/<filename>.hsal
    For help, run
	bin/hsal2hasal -h


Additional notes for Macs.
--------------------------
The install script (install.py) tries to search for the correct path to
rt.jar or classes.jar, but it usually fails the path to classes.jar on Mac.
In this case, run the install script as follows:
  python install.py --rtjar <absolute-path/filename.jar>


Additional notes for Windows.
-----------------------------
Preparing the distribution directory:
An executable for windows can be created using py2exe tool as follows:
Run python setup.py py2exe
It creates an executable for the <file.py> python file specified in setup.py

The generated <file.exe> file is an executable that is almost self
contained except that it requires the following .dll's which are not 
included:

OLEAUT32.dll
USER32.dll
IMM32.dll
SHELL32.dll
KERNEL32.dll
COMDLG32.dll
WSOCK32.dll
COMCTL32.dll
ADVAPI32.dll
msvcrt.dll
WS2_32.dll
GDI32.dll
ole32.dll
umath.pyd
_flinalg.pyd

[All these .dlls are in C:\WINDOWS\system32\ on my machine; 
 and the two .pyd files are in 
c:\Python26\lib\site-packages\numpy\core\umath.pyd  and
c:\Python26\lib\site-packages\scipy\linalg\_flinalg.pyd ]

This .exe was created using the command:
python26/python setup.py py2exe
where setup.py is the python script in this directory.

The hybridsal2xml translater is also converted into a .jar
file (jar cfm hybridsal2xml.jar Manifest.txt *.class antlr).
Note Manifest tells which class file has the main() function,
and antlr has to be moved up to hybridsal2xml/ (as a symbolic
link) to get the right jar.  Now, hybridsal2xml can be called
using "jave -jar hybridsal2xml.jar -o hxmlfile hsalfile"
This .jar file is moved to the distribution directory.

Similarly, a script for calling sal-inf-bmc has to be included
in the distribution directory.
The script "python installdist.py" does this job.

Running the above installation script should tell you what
is missing.  Most likely, SAL would be missing.

HybridSAL uses SAL model checkers. To install, follow these steps:
(1) Install cygwin: install the basic/default variety
    (Doesn't take too long, but need fast internet connection)
    (google on cygwin: www.cygwin.com)
(2) Download sal-3.2 tgz file for Windows/cygwin (sal.csl.sri.com)
(3) Move sal-3.2.tgz to a place inside cygwin, such as,
    c:\cygwin\home\<username>\
(4) Open a cygwin shell, Unpack sal and run install.sh script there
(5) Update PATH variable with path to sal (mentioned by install.sh)

Now, do "python installdist.py" in the distribution directory
for installing HybridSal (as above).
Note: you need to create examples/ subdirectory in the distribution
directory for the tests to run.

To run HybridSal:
Run
 ./hsalRA.exe <ModelicalXML-file> <Property-file>

For example, run:

./hsalRA.exe examples/MassSpringDamperTest.MassSpringDamperTest.xml examples/MassSpringDamperTest.property.json


How to use the relational abstractions?
---------------------------------------

The relational abstraction are written in SAL files, hence
SAL tools can be applied to it.

For example, sal-inf-bmc can be used to perform infinite 
bounded model checking on the SAL files to verify safety
properties or obtain counter examples.

Note: Auxiliary lemmas may be needed.
 In some cases, <filename>.sal.proved contains such
 auxiliary lemmas and the sal command to prove properties.
 Do a "diff <filename>.sal.proved <filename>.sal" to see
 what auxiliary lemmas were added.

sal-inf-bmc and other SAL tools are publicly available
from http://sal.csl.sri.com/

See README file for more details on how to use the installed tool.

----------------------------------------------------
Author: Ashish Tiwari (tiwari@csl.sri.com)
----------------------------------------------------
