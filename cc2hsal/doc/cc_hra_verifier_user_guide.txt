
HybridSal for Modelica and Matlab: A User Guide

We describe the steps involved in using the HybridSal
verification tool for proving correctness of controller
designs in a cyber-physical system model.

There are four main steps involved in using the
HybridSal verification tool.

 Step 1. Building a model of the system to be verified

 Step 2. Adding properties to the model that need to be verified

 Step 3. Running the tool 

 Step 4. Understanding the output results of the tool
  
Steps 1, 2 and 4 are performed outside the HybridSal verification
tool itself, but they are supported by the META CyPhy tool. See the 
documentation on the META CyPhy tool for details on how to perform
Steps 1, 2, and 4.  Just for completeness, we will include a 
brief description of these steps relevant for HybridSal in this document.

We provide more details on the four steps now.


 Step 1: Building a model of the system to be verified

A model of the system consists of two main parts: a controller
model and  a plant model.

Controller models are assumed to be developed in Matlab's Simulink 
Stateflow language.  The preferred version of Matlab is R13b.

Note: The verification tool can not analyze arbitrary Simulink
Stateflow models. It can only handle certain blocks.  For examples
of controllers that can be analyzed, the reader should
see the example ShiftController, TorqueConverter and 
TorqueReductionSignal controller models.

Note: To get started, it may be appropriate to take one of these
three controller models, edit it in different ways, and then
use the modified models as the input models for verification.
For example, the stateflow chart in the examples can be edited -- 
by adding transitions, removing transitions, or changing the guards 
and actions.  

Note: If the verification tool is given a controller model that 
uses Matlab constructs that are not handled, the tool terminates
with an appropriate error message (which will be printed to
the console). The expected output, which is a text file containing
the verification results, will not be generated.

Plant models are assumed to be developed in the Modelica-CyPhy
integrated environment.

Both models -- the controller and the plant --  are exported and
saved as XML files using the Meta/CyPhy tool.  The HybridSal
verification tool takes these XML files as its input.

Note: In the verification tool, the mapping between the controller 
variables and the plant variables is performed by "name" -- 
that is, for every input of the controller, it is assumed that 
there is a variable in the plant whose name has the controller 
variable name as its suffix.  Modelica's aliasVariables feature 
can be used for this purpose.  This happens automatically if
the XML files are generated using the META/CyPhy tool.


Step 2: Adding properties to the model that need to be verified

The verification tool's primary focus is the controller.
In fact, the plant model is optional and the tool can
verify controllers in isolation.

Properties are added to the controller models.  

Vanderbilt University has developed scripts that extend the 
graphical user interface of Matlab Simulink/Stateflow with 
dialog boxes for specifying (linear) temporal logic properties 
using a template- or pattern-based system.

Desired properties of the controllers are attached to the 
Simulink subsystem or Stateflow chart using this extension.

The reader is encouraged to view the properties in the example
controller models.

When the META tool exports the controller model as XML, it 
includes the properties in the generated XML file.
These properties are then verified by the verification tool.

Note: Properties should refer to interface variables of the
Matlab controller (preferably), but they can also refer to
the interface variables of the subcomponent (a stateflow chart,
for example) in which they are specified.  

Note: Inside the property specification blocks of the Vanderbilt
LTL property tool, arithmetic operators, such as ==, <=, >=, <, 
and >, can be used to specify the property.  Furthermore, LTL 
operators, always (written as G) and eventually (written as 
F), can also be used inside the property specification blocks.


Step 3: Running the tool 

When the verification tool is invoked from the META tool, it 
reports its progress on the console via a series of messages.
Assuming that the controller and plant models have been exported
as XML files, the verification tool performs the following
steps internally:

 (1) Translate the controller XML file into a HybridSal 
 representation of the controller model, including the properties

 (2) Slice the plant XML model to create a sliced plant XML file 
 that only contains the parts of the plant model relevant for 
 analyzing the controller

 (3) Translate the sliced XML file into a HybridSal representation of
 the sliced plant model

 (4) Merge the controller and the sliced plant model

 (5) Abstract the composed model

 (6) Verify the properties on the abstract model

 (7) Collect the results in a results file

 (8) Generate Matlab files for the controller input variables
 to simulate the counterexamples for properties that are found to
 be false

Intermediate results are stored in temporary files (that are not
removed after the tool has terminated).   If 
pathname1/controller_filename.xml  is the controller model, and 
pathname2/plant_filename.xml  is the plant model, then the
verification tool creates the following files in that order:

  (1) file pathname1/controller_filename.hsal, which is the HybridSal
  translation of the controller model

  (2) file pathname2/plant_filename_slice.xml, which is a slice of the
  the plant model that is relevant for the controller

  (3) a series of pathname2/plant_filename_slice.daexml, .daexml1, 
  .daexml2, .daexml3 and .daexml4 files that contain intermediate
  stages of translating the plant XML to HybridSal
  
  (4) file pathname2/plant_filename_sliceModel.hsal, which is the
  HybridSal translation of the sliced plant model
  
  (5) file pathname1/controller_filenameplant_filename_sliceModel.hsal,
  which is a proper merge of the plant and controller HybridSal models;
  the file also includes the properties that need to be verified

  (6) file pathname1/controller_filenameplant_filename_sliceModel.sal,
  which is an abstraction of the corresponding .hsal file, obtained by
  applying relational abstraction to the HybridSal model
  
  (7) file pathname1/controller_filenameplant_filename_sliceModelResult.txt,
  which is the file that contains the results of verifying all the
  properties.

In case the tool terminates with a failure condition, the existence
or non-existence of these files can indicate which step in the 
verification process failed.  Interested users can also open the 
HybridSal files to see the formal representation of the system 
and the LTL properties.


Step 4: Understanding the output results of the tool

As mentioned above, the file
  pathname1/controller_filenameplant_filename_sliceModelResult.txt
contains the verification results.  It is an ASCII text file,
which lists each property, followed by the result of verification.
There are two possible outcomes for each property. Either no violation
of the property is found, in which case the file contains the message
"no counterexample", or the verification tool successfully finds a 
violation of the property, in which case the file contains the 
trace of the system model that exhibits the violation (called a
counterexample).

While looking at the results.txt file can be helpful, the META tool 
also presents the verification results graphically in the dashboard.
A green box indicates the property was verified, a red box 
indicates it was found to be false.  False properties generate 
a counterexample -- a scenario under which the violation is
exhibited by the model.  There are automatic scripts that convert 
counterexamples into Matlab files that can be used to simulate the 
counterexample scenario in Matlab.  The user has to open the controller 
models in Matlab, attach the inputs of the models to these generated 
files, attach a scope to the outputs, and then run a regular Matlab 
simulation.

Note: It is possible for the Matlab simulation to diverge from the
counterexample, and thus, it may not even appear to be a counterexample
to the property.  The reason is that timing information is not 
preserved in the round-trip translation from Matlab to HybridSal and
back. In particular, one step of HybridSal need not correspond to
one simulation step of the Matlab model.  The user can try changing
the time step of simulation in the Matlab model, and that can result
in different outcomes, one of which will be a counterexample to the
property.

Note: The verification tool's focus is on controller verification.  
The plant model is sliced and abstracted to support efficient 
controller verification.  Hence, the analysis can be coarse.
However, the analysis can still be useful, especially if care is 
taken in specifying the LTL properties.  In particular, the 
specified LTL properties should ideally constrain the inputs of 
the controllers, and then check that the response of the controller 
is appropriate for that scenario.  The predefined LTL templates may 
not be sufficient for this purpose.

Note: Advanced users who are familiar with SAL or HybridSAL can
also edit the generated HybridSal or Sal files directly and run
the HybridSal abstracter and the SAL-infinite-state model checker
directly on the modified files using command-line invocation --
this can save time, but the edits are not carried back to the 
Matlab models.

