PITimed: CONTEXT = 
BEGIN
N: NATURAL = __N__ ;
Range: TYPE = [0 .. 2];
exp: ARRAY Range OF REAL = [[i:Range] 
     IF i=0 THEN 1.05127110 ELSIF i=1 THEN 1.10517 ELSE 1.64872 ENDIF];
time: ARRAY Range OF REAL = [[i:Range] 
     IF i=0 THEN 0.05 ELSIF i=1 THEN 0.1 ELSE 0.5 ENDIF];

abs (a:REAL) : REAL  = 
 IF a < 0 THEN -(a) ELSE a ENDIF  ;

eigenTimedInv (xold:REAL,xnew:REAL,k:REAL) : BOOLEAN  = 
 xnew = k * xold ;

quadTimedInv (xold:REAL,yold:REAL,xnew:REAL,ynew:REAL,a:REAL,b:REAL) : BOOLEAN  = 
 xnew = a * xold - b * yold AND ynew = b * xold + a * yold ;

quadInv (xold:REAL,yold:REAL,xnew:REAL,ynew:REAL) : BOOLEAN  = 
 abs(xnew) <= abs(xold) + abs(yold) AND abs(ynew) <= abs(xold) + abs(yold) AND (abs(xnew) <= abs(xold) OR abs(ynew) <= abs(yold)) AND (abs(xnew) <= abs(yold) OR abs(ynew) <= abs(xold)) ;


plant: MODULE =
BEGIN
LOCAL xdot:REAL,ydot:REAL
INPUT u:REAL
OUTPUT x:REAL,y:REAL
INITIALIZATION
[
-(1) <= x AND x <= 1 AND y = 0  --> 
]

TRANSITION
[
TRUE AND eigenTimedInv(x + 0.2 * u,x' + 0.2 * u, exp[N]) AND 
 (x'-5*y') - (x-5*y) = time[N]*u --> 
	y' IN { aZtQ : REAL | TRUE } ;
	x' IN { aZtQ : REAL | TRUE } 
]
END ;


controller: MODULE =
BEGIN
INPUT x:REAL,y:REAL
OUTPUT u:REAL
INITIALIZATION
	u = 0 

TRANSITION
[
TRUE  --> 
	u' = -(30) * x' - y' 
]
END ;


system: MODULE =
( plant || controller ) ;

% sal-inf-bmc -i -d 22 PITimed stable
stable : THEOREM
system |- G(-(2) <= x AND x <= 2);
END
