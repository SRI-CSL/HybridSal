% Train gate controller
TGC: CONTEXT =
BEGIN

Mode: TYPE = {s1, s2, s3, s4};

timeElapse: MODULE = 
BEGIN
 GLOBAL x, y, z: REAL
 LOCAL xdot, ydot, zdot: REAL
 INPUT s, g, c: Mode
 INPUT lower, exit, raise, approach: BOOLEAN
 INITIALIZATION x = 0; y = 0; z = 0 
 TRANSITION
 [
 ((s = s1 AND exit = FALSE) OR
  (s = s2 AND approach = FALSE AND x <= 5 AND x' <= 5)) AND
 ((g = s2 AND y <= 1 AND y' <= 1) OR
  (g = s3 AND y <= 2 AND y' <= 2) OR (g = s1)) AND
 ((c = s2 AND z <= 1 AND z' <= 1) OR
  (c = s3 AND lower = FALSE) OR 
  (c = s4 AND z <= 1 AND z' <= 1) OR
  (c = s1 AND raise = FALSE))
 --> xdot' = 1; ydot' = 1; zdot' = 1
 ]
END;

train: MODULE =
BEGIN
  GLOBAL approach, exit: BOOLEAN
  GLOBAL x: REAL
  OUTPUT s: Mode
  INITIALIZATION  s = s1; approach = FALSE; exit = FALSE
  TRANSITION
  [
  s = s1 --> s' = s2; approach' = TRUE; x' = 0
  []
  s = s2 AND approach = FALSE AND x > 2 --> exit' = TRUE; s' = s1
  ]
END ;

gate: MODULE =
BEGIN
  GLOBAL lower, raise: BOOLEAN
  GLOBAL y: REAL
  OUTPUT g: Mode
  INITIALIZATION  g = s1
  TRANSITION
  [
  g = s1 AND lower = TRUE --> lower' = FALSE; g' = s2; y' = 0
  []
  g = s2 AND raise = TRUE --> g' = s3; raise' = FALSE; y' = 0
  []
  g = s3 AND y >= 1 --> g' = s1
  ]
END ;

controller: MODULE =
BEGIN
  GLOBAL lower, raise, approach, exit: BOOLEAN
  GLOBAL z: REAL
  OUTPUT c: Mode
  INITIALIZATION  c = s1; lower = FALSE; raise = FALSE
  TRANSITION
  [
  c = s1 AND raise = FALSE AND approach = TRUE --> approach' = FALSE; c' = s2; z' = 0
  []
  c = s2 AND z = 1 --> c' = s3; lower' = TRUE
  []
  c = s3 AND lower = FALSE AND exit = TRUE --> c' = s4; z' = 0; exit' = FALSE
  []
  c = s4 --> c' = s1; raise' = TRUE
  ]
END;

observer: MODULE =
BEGIN
  INPUT lower, raise, approach, exit: BOOLEAN
  TRANSITION
  [
  NOT(lower AND lower') AND NOT(raise AND raise') AND 
  NOT(approach AND approach') AND NOT(exit AND exit') -->
  ]
END;

system: MODULE = 
 ((train [] gate [] controller [] timeElapse) || observer);

correct: THEOREM
  system |- G( (s = s2 AND x >= 2) => g = s2 ) ;
END
