% A robot moving in 2D space. 
% Goal is to prove that the robot stays inside $|x| <= 1$.
% It is controlled by a nondeterministic switching controller 
% that switches between two modes: move NE, move NW
% NOTE: The system is modeled using synchronous composition 
% between controller and plant
% This means, each step of the system consists of two microsteps: 
% the robot moves as per the continuous dynamics, followed by
% a controller action. 
% Pros: We observe only states at the discrete transitions.
% Pros: bmc requires less depth
% Cons: We do not observe intermediate states where safety maybe violated
% Solution: Added a Boolean flag. The last transition can observe
% any reachable state.
% There are two other seemingly useless controller transitions
% These are there to make the system observe zero crossing for vx.
% This helps in proving correctness.

robotnav:CONTEXT = 
BEGIN

 INV(x:REAL, y:REAL, vx:REAL, vy:REAL, xn:REAL, yn:REAL, vxn: REAL, vyn:REAL): BOOLEAN = 
  %((vx >= 0 AND vxn >= 0 AND xn >= x) OR
   % (vx <= 0 AND vxn <= 0 AND xn <= x)) AND
  (vxn <= 12/10 AND vxn >= -12/10) AND (vyn >= 0 AND vyn <= 12/10) ;

 DirectionType: TYPE = { NE, NW };

 % Model the dynamics of the robot in the two modes
 plant: MODULE =
 BEGIN
 INPUT direction : DirectionType 
 OUTPUT x, vx, y, vy : REAL
 INITIALIZATION
  x IN {z: REAL | -1 <= z AND z <= 1};
  vx = 0; vy = 0; y = 0
 TRANSITION
 [  direction = NW AND INV(x,y,vx,vy,x',y',vx',vy') -->
     xdot' = vx;  vxdot' = (-1 - vx)*12/10 + 1/10*(vy-1);
     ydot' = vy;  vydot' = (1 - vy)*12/10 + 1/10*(vx+1)
 [] direction = NE AND INV(x,y,vx,vy,x',y',vx',vy') -->
     xdot' = vx;  vxdot' = (1 - vx)*12/10 + 1/10*(vy-1);
     ydot' = vy;  vydot' = (1 - vy)*12/10 + 1/10*(vx-1)
 ]
 END;
 
 controller: MODULE =
 BEGIN
 OUTPUT direction: DirectionType
 INPUT x, vx : REAL
 TRANSITION
 [  direction = NW AND x' <= -1 AND x' >= -3/2 -->
     direction' = NE 
 [] direction = NE AND x' >= 1 AND x' <= 3/2 -->
     direction' = NW  
 [] vx > 0 AND vx' = 0  -->
 [] vx < 0 AND vx' = 0  -->
 ]
 END;

 system: MODULE = plant || controller ;

 % sal-inf-bmc -i -d  4 robotnav correct
 correct: THEOREM
     system |- G( x <= 3 AND x >= -3 );

 % sal-inf-bmc -i -d  12 robotnav wrong
 wrong: THEOREM
     system |- G( x <= 2 AND x >= -2 );
END



